/// Global variable to represent the current test suite.
$__webfontState: (

  /// Set of active webfonts
  fonts: ()
);

/// Generate the output sequence string for a fully compatible webfont,
/// as per: https://css-tricks.com/snippets/css/using-font-face/
/// @param $alias The alias to call this font
/// @param $name The actual font name.
/// @param $root The root font file to use.
/// @param $test If this is test mode, don't emit css.
@mixin WebFontDefine($alias, $name, $root, $test:false) {

  // Update font list
  $fonts: map-get($__webfontState, fonts);
  $fonts: map-merge($fonts, ($alias: $name));
  $__webfontState: map-merge($__webfontState, (fonts: $fonts)) !global;

  // Generate output
  @if not $test {
    $font_eot: PathReplaceExt($root, "eot");
    $font_woff2: PathReplaceExt($root, "woff2");
    $font_woff: PathReplaceExt($root, "woff");
    $font_ttf: PathReplaceExt($root, "ttf");
    $font_svg: PathReplaceExt($root, "svg");
    @font-face {
      font-family: '#{$name}';
      src: url('#{$font_eot}');
      src: url('#{$font_eot}?#iefix') format('embedded-opentype'),
      url('#{$font_woff2}') format('woff2'),
      url('#{$font_woff}') format('woff'),
      url('#{$font_ttf}')  format('truetype'),
      url('#{$font_svg}#svgFontName') format('svg');
    }
  }
}

/// Use a specific named webfont
@function WebFont($alias, $test:false) {
  $fonts: map-get($__webfontState, fonts);
  $rtn: map-get($fonts, $alias);
  @if not $rtn {
    @if not $test {
      @warn "Invalid attempt to use missing font '#{$alias}'";
    }
  }
  @return $rtn;
}

/// Clear cached webfont state
@function WebFontClear() {
  $__webfontState: (
    fonts: ()
  ) !global;
  @return true;
}
